<Project>
<!--#if (!no-tutorial) -->
  <!--
    This is a special file that contains shared configuration
    for all project files in subdirectories.
  -->
<!--#endif -->

  <!-- Set additional NuGet sources -->
  <PropertyGroup>
    <RestoreAdditionalProjectSources>
      https://nuget.bepinex.dev/v3/index.json;
      https://nuget.windows10ce.com/nuget/v3/index.json
    </RestoreAdditionalProjectSources>
  </PropertyGroup>

  <!-- Build dependencies -->
  <ItemGroup>
<!--#if (!no-tutorial) -->
    <!--
      If you upload your project on NuGet, PrivateAssets="all"
      prevents consumers of your package from referencing these
      packages transitively. This is desired because these packages
      are not required by anyone using your package as they are
      code analyzers, source generators, or other build-only packages.
    -->
<!--#endif -->
    <PackageReference Include="BepInEx.Analyzers" Version="1.*" PrivateAssets="all" />
    <PackageReference Include="BepInEx.AssemblyPublicizer.MSBuild" Version="0.4.3" PrivateAssets="all" />
    <PackageReference Include="Hamunii.BepInEx.AutoPlugin" Version="2.0.*" PrivateAssets="all" />
<!--#if (!no-tutorial) -->
    <!-- Source-only polyfills for C# language features https://github.com/Sergio0694/PolySharp -->
<!--#endif -->
    <PackageReference Include="PolySharp" Version="1.15.0" PrivateAssets="all" />
  </ItemGroup>

  <!-- Modding dependencies -->
  <ItemGroup>
    <PackageReference Include="BepInEx.Core" Version="5.4.21" />
    <!-- In reality BepInEx 5.4.21 ships HarmonyX 2.9 but BepInEx.Core gives us 2.7 -->
    <PackageReference Include="HarmonyX" Version="2.9.0" />
  </ItemGroup>

  <!-- NuGet fallback stripped game references -->
  <ItemGroup Condition="!Exists('$(ManagedDir)')">
<!--#if (!no-tutorial) -->
  <!--
    To reference a a version of the GameLibs package other than the latest,
    you can specify the version of the package:
    https://www.nuget.org/packages/Silksong.GameLibs/#versions-body-tab
  -->
<!--#endif -->
    <PackageReference Include="Silksong.GameLibs" Version="*-*" />
  </ItemGroup>

  <!-- Local game references -->
  <ItemGroup Condition="Exists('$(ManagedDir)')">
<!--#if (!no-tutorial) -->
    <!--
      Reference all assemblies except ones that come
      with our target framework or would cause conflicts.
      Private="false" prevents these from being copied to build output.
    -->
<!--#endif -->
    <LocalReferences
      Include="$(ManagedDir)*.dll"
      Exclude="$(ManagedDir)Mono*.dll;$(ManagedDir)netstandard.dll;$(ManagedDir)System*.dll;$(ManagedDir)mscorlib.dll"
    />
    <Reference Include="@(LocalReferences)" Private="false" />
<!--#if (!no-tutorial) -->
    <!--
      Publicize these assemblies so we can access their internal members.
      Learn more at: https://github.com/BepInEx/BepInEx.AssemblyPublicizer
    -->
<!--#endif -->
    <Reference Include="$(ManagedDir)Assembly-CSharp.dll" Private="false" Publicize="true" />
  </ItemGroup>

  <!--
    To make building Thunderstore packages uncoupled from release builds, swap
    the positions of the commented out Target line:
    <Target Name="PackTS" DependsOnTargets="Build" Condition="$(ThunderstorePackable) != 'false'">
    and the one below.

    With Thunderstore package builds being uncoupled from release builds,
    build Thunderstore packages by calling `dotnet build -c Release -target:PackTS -v d` (verbosity detailed).

    Publish to Thunderstore by including `-property:PublishTS=true` in the command.
  -->
  <Target Name="PackTS" AfterTargets="Build" Condition="'$(Configuration)' == 'Release' And '$(ThunderstorePackable)' != 'false'">
    <Error
      Text=" PackTS must be called with Release configuration."
      Condition="'$(Configuration)' != 'Release'"
    />
    <PropertyGroup>
      <BuildArgument Condition="'$(PublishTS)' != 'true'">build</BuildArgument>
      <BuildArgument Condition="'$(PublishTS)' == 'true'">publish</BuildArgument>
    </PropertyGroup>
    <Exec Command="dotnet tool restore" />
    <Exec Command="dotnet tcli $(BuildArgument) --package-version $(Version)" />
  </Target>

</Project>
