<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
<!--#if (!no-tutorial) -->
    <!-- This is the most appropriate target framework for the game's Unity version. -->
<!--#endif -->
    <TargetFramework>netstandard2.1</TargetFramework>
<!--#if (!no-tutorial) -->
    <!-- This is the GUID of your mod. Example: com.github.YourAccount.BepInExTemplate -->
<!--#endif -->
    <AssemblyName>_Guid_</AssemblyName>
<!--#if (!no-tutorial) -->
    <!-- This is the display name of your mod. Example: BepInEx Template -->
<!--#endif -->
    <AssemblyTitle>BepInExModTemplate</AssemblyTitle>
<!--#if (!no-tutorial) -->
    <!-- This is the version number of your mod. -->
<!--#endif -->
    <Version>0.1.0</Version>
  </PropertyGroup>

<!--#if (library) -->
  <!-- NuGet metadata -->
  <PropertyGroup>
    <IsPackable>true</IsPackable>
    <!--
      TODO: Fill these values. See:
      https://learn.microsoft.com/en-us/nuget/create-packages/package-authoring-best-practices
    -->
    <PackageId></PackageId>
    <Description></Description>
  </PropertyGroup>
  <ItemGroup>
    <None Include="$(SolutionRoot)README.md" Pack="true" PackagePath="/" />
    <None Include="$(SolutionRoot)icon.png" Pack="true" PackagePath="/" />
  </ItemGroup>

<!--#endif -->
<!--#if (!no-tutorial) -->
  <!--
    To reference mod assemblies from Thunderstore packages via NuGet,
    this project includes the following NuGet feed:
    https://nuget.windows10ce.com/nuget/v3/index.json

    With this, you can simply depend on a Thunderstore package like so:

    <ItemGroup>
      <PackageReference Include="ModTeam-ModName" Version="*" />
    </ItemGroup>

    This will cause the mod to be downloaded and its
    methods will be available at compile time for your code.

    Note that this does NOT mark the package as a dependency
    for your Thunderstore package.
  -->

<!--#endif -->
</Project>
